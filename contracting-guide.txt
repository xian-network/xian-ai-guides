CONTRACTING SMART CONTRACT DEVELOPMENT GUIDE
============================================

1. CORE LANGUAGE RULES
--------------------
LANGUAGE VERSION:
- Contracts must use Python 3.11 syntax. Features introduced in later versions are prohibited.

ALLOWED BUILTINS:
- Primitive types/constants: bool, int, str, float, dict, list, tuple, set, True, False, None, Exception
- Type checks/conversions: isinstance, issubclass, bytes, bytearray, chr, ord, hex, bin, ascii, format, oct
- Math/iterables: abs, divmod, max, min, pow, round, sum, all, any, filter, map, range, reversed, sorted, zip
- Containers: dict, list, tuple, set, frozenset

EXPLICITLY FORBIDDEN:
- print() / file I/O
- Classes (class), async/await, lambda
- Exception handling (try/except/finally)
- Metaprogramming (eval, exec, getattr)
- Underscore prefixes (__private_var)

2. CONTRACT STRUCTURE
-------------------
MANDATORY TEMPLATE:
# State declarations (top-level only)
owner = Variable()
balances = Hash()

# Constructor (runs once on deployment)
@construct
def init():
    owner.set(ctx.caller)
    balances[ctx.caller] = 1000

# Exported function (public interface)
@export
def transfer(to: str, amount: int):
    assert amount > 0, "Amount must be positive"
    sender = ctx.caller
    balances[sender] -= amount
    balances[to] += amount

3. TYPE SYSTEM & ANNOTATIONS
-------------------------
VALID PARAMETER TYPES (NO RETURN TYPES):
@export
def valid_annotations(
    name: str,                   # Primitive
    metadata: dict,              # Key-value store
    deadline: datetime.datetime  # Special types
):                               # NO return type annotations allowed
    pass

FORBIDDEN:
- Return type annotations (-> str, -> int, -> None, etc.)
- Contract addresses in contracting are strings prefixed with "con_" (e.g., "con_xsc001").

4. STATE MANAGEMENT
-----------------
ALLOWED ORM OBJECTS:
# Single-value storage
config = Variable()

# Key-value storage (max 16 dimensions)
ledger = Hash(default_value=0)

# Cross-contract access (read-only)
token_supply = ForeignVariable(
    foreign_contract='currency',
    foreign_name='total_supply'
)

5. BLOCK CONTEXT & UTILITIES
--------------------------
@export
def get_block_info() -> dict:
    return {
        "height": block_num,     # Current block number (int)
        "hash": block_hash,      # Current block hash (str)
        "time": now              # UTC timestamp (datetime)
    }

@export
def verify_signer(pubkey: str, sig: str) -> bool:
    return verify_signature(
        pubkey=pubkey,
        signature=sig,
        message=ctx.signer
    )

6. ALLOWED CONTROL FLOW
---------------------
PERMITTED PATTERNS:
# If-Elif-Else
if balances[ctx.caller] > 100:
    status = "VIP"
else:
    status = "Standard"

# For loops (bounded with range)
for i in range(10):
    process(i)

# Assertions (no exceptions!)
assert ctx.signer == owner.get(), "Unauthorized"

7. CROSS-CONTRACT CALLS
---------------------
@export
def call_other_contract():
    # Absolute import only
    token = importlib.import_module('currency')
    
    # Interface validation
    required = [
        importlib.Func('transfer', args=('amount', 'to')),
        importlib.Var('balances', Hash)
    ]
    assert importlib.enforce_interface(token, required)
    
    # Execute call
    token.transfer(amount=100, to=ctx.caller)

8. OPTIMIZATION RULES
------------------
# High cost: Write operations (25 stamps/byte)
balances[ctx.caller] = 500  # Minimize writes

# Low cost: Read operations (1 stamp/byte)
balance = balances[ctx.caller]  # Reuse reads

KEY VALIDATION CHECKLIST FOR LLMs
------------------------------
1. No random module – deterministic logic only
2. No nested imports – use top-level importlib
3. contract should at least have one function with @export decorator
4. Variables must use Variable()/Hash(), not native types

9. EVENT LOGGING
--------------
Events are used to record significant contract state changes. Follow these rules to define and emit events:

EVENT DEFINITION
Define events at the top level using LogEvent:

# Syntax
EventName = LogEvent(
    event="EventNameString",
    params={
        "param1": {"type": <valid_type>, "idx": <boolean>},
        "param2": {"type": <valid_type>, "idx": <boolean>},
        ...
    }
)

# Example (from xsc001.py)
TransferEvent = LogEvent(
    event="Transfer",
    params={
        "from": {"type": str, "idx": True},   # `idx=True` enables filtering by this field
        "to": {"type": str, "idx": True},
        "amount": {"type": (int, float, decimal)}
    }
)
Rules:

event: Must be a unique, descriptive string.

params:

Use primitive types (str, int, float) or tuples for multiple allowed types.

idx=True marks the parameter as indexable (for efficient querying).

Complex types (e.g., datetime) must be serialized to str before logging.

EMITTING EVENTS
Call the event instance with a dictionary of parameters:

# Syntax
EventName({"param1": value1, "param2": value2, ...})

# Example (from xsc001.py)
@export
def transfer(amount: float, to: str):
    ...
    TransferEvent({"from": ctx.caller, "to": to, "amount": amount})
Rules:

All parameters defined in the event must be provided.

Data types must match the params definition (e.g., amount must be int/float).

Use str() to serialize non-primitive types (e.g., datetime → str(now)).

BEST PRACTICES

Indexing: Mark frequently queried fields (e.g., addresses, IDs) with idx=True.

Naming: Use past-tense verbs (e.g., Transfer, Approval) for event names.

Data Minimization: Log only essential data to reduce gas/stamp costs.

Consistency: Reuse event definitions across related functions (see TransferEvent in all contracts).

FULL EXAMPLE

# Event definition
StreamCreatedEvent = LogEvent(
    event="StreamCreated",
    params={
        "sender": {"type": str, "idx": True},
        "receiver": {"type": str, "idx": True},
        "stream_id": {"type": str, "idx": True},
        "rate": {"type": (int, float, decimal)},
        "begins": {"type": str},  # datetime serialized to string
        "closes": {"type": str},
    }
)

# Emitting the event (from xsc003.py)
@export
def create_stream(...):
    ...
    StreamCreatedEvent({
        "sender": sender,
        "receiver": receiver,
        "stream_id": stream_id,
        "rate": rate,
        "begins": str(begins),
        "closes": str(closes)
    })
    
Validation Checklist for LLMs:

Are all event parameters explicitly defined with types?

Does the emitted data match the params schema (types, required fields)?

Are non-primitive types (e.g., datetime) converted to str?

Are critical query fields (addresses, IDs) marked with idx=True?

[END OF GUIDE]
